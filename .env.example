# ============================================
# Flash Connect - WhatsApp Web.js Prototype
# ============================================
# This is the configuration for the WhatsApp Web.js prototype branch.
# This branch uses WhatsApp Web automation for development/testing only.
# 
# ⚠️  WARNING: WhatsApp may ban numbers using automation. Use a test number!
# ============================================

# Application Configuration
NODE_ENV=development
PORT=3000

# ============================================
# Redis Configuration (Required)
# ============================================
# Redis is used for session management and caching
# To start Redis locally: docker compose up -d redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=flash_redis_secure_pass

# ============================================
# RabbitMQ Configuration (Required)
# ============================================
# RabbitMQ is used for event messaging between services
# To start RabbitMQ locally: docker compose up -d rabbitmq
RABBITMQ_URL=amqp://flash:flash_secure_pass@localhost:5672

# ============================================
# Flash API Configuration (Optional)
# ============================================
# The Flash GraphQL API endpoint for account operations
# Leave empty to disable Flash API integration during development
# To get these values:
# 1. Contact the Flash API team for sandbox credentials
# 2. Or leave empty to test without account linking features
FLASH_API_URL=https://api.flashapp.me/graphql
FLASH_API_KEY=

# ============================================
# Google Gemini AI Configuration (Optional)
# ============================================
# Gemini AI provides intelligent responses for customer queries
# To get an API key:
# 1. Go to https://makersuite.google.com/app/apikey
# 2. Click "Create API Key"
# 3. Copy the generated key here
# Leave empty to disable AI responses (will use basic FAQ responses)
GEMINI_API_KEY=

# ============================================
# WhatsApp Web.js Configuration
# ============================================
# No configuration needed! WhatsApp Web.js will:
# 1. Show a QR code in the terminal when you start the app
# 2. Save the session locally in ./whatsapp-sessions
# 3. Automatically reconnect on subsequent runs

# ============================================
# Security Configuration (Optional)
# ============================================
# JWT secret for session tokens (auto-generated if not provided)
JWT_SECRET=your_jwt_secret_here_change_in_production
# MFA timeout in seconds
MFA_TIMEOUT_SECONDS=300
# OTP expiration in seconds
OTP_EXPIRES_IN_SECONDS=600
# Session expiration in seconds (24 hours)
SESSION_EXPIRES_IN_SECONDS=86400

# ============================================
# Rate Limiting
# ============================================
# Prevent abuse by limiting requests per user
# RATE_LIMIT_WINDOW_MS: Time window in milliseconds
# RATE_LIMIT_MAX_REQUESTS: Maximum requests per time window
RATE_LIMIT_WINDOW_MS=60000
RATE_LIMIT_MAX_REQUESTS=100

# ============================================
# Logging
# ============================================
# Log level: error, warn, info, debug, verbose
LOG_LEVEL=info