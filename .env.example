# ============================================
# Pulse - WhatsApp Web.js Prototype
# ============================================
# This is the configuration for the WhatsApp Web.js prototype branch.
# This branch uses WhatsApp Web automation for development/testing only.
# 
# ⚠️  WARNING: WhatsApp may ban numbers using automation. Use a test number!
# ============================================

# Application Configuration
NODE_ENV=development
PORT=3000

# ============================================
# Redis Configuration (Required)
# ============================================
# Redis is used for session management and caching
# To start Redis locally: docker compose up -d redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=flash_redis_secure_pass

# ============================================
# RabbitMQ Configuration (Required)
# ============================================
# RabbitMQ is used for event messaging between services
# To start RabbitMQ locally: docker compose up -d rabbitmq
RABBITMQ_URL=amqp://flash:flash_secure_pass@localhost:5672

# ============================================
# Flash API Configuration (Optional)
# ============================================
# The Flash GraphQL API endpoint for account operations
# Leave empty to disable Flash API integration during development
# To get these values:
# 1. Contact the Flash API team for sandbox credentials
# 2. Or leave empty to test without account linking features
FLASH_API_URL=https://api.flashapp.me/graphql
FLASH_API_KEY=

# ============================================
# Google Gemini AI Configuration (Optional)
# ============================================
# Gemini AI provides intelligent responses for customer queries
# To get an API key:
# 1. Go to https://makersuite.google.com/app/apikey
# 2. Click "Create API Key"
# 3. Copy the generated key here
# Leave empty to disable AI responses (will use basic FAQ responses)
GEMINI_API_KEY=

# ============================================
# WhatsApp Web.js Configuration
# ============================================
# No configuration needed! WhatsApp Web.js will:
# 1. Show a QR code in the terminal when you start the app
# 2. Save the session locally in ./whatsapp-sessions
# 3. Automatically reconnect on subsequent runs
#
# Optional: Disable WhatsApp Web initialization (for testing APIs only)
# DISABLE_WHATSAPP_WEB=false

# ============================================
# Security Configuration (REQUIRED in production)
# ============================================
# JWT Configuration
JWT_SECRET=your_jwt_secret_here_min_32_chars_required_in_production
JWT_EXPIRES_IN=24h
JWT_REFRESH_EXPIRES_IN=7d

# Encryption Keys (REQUIRED - generate secure random strings)
# Generate with: openssl rand -hex 32
ENCRYPTION_KEY=your_encryption_key_here_min_32_chars_required
ENCRYPTION_SALT=your_encryption_salt_here_min_16_chars
HASH_SALT=your_hash_salt_here_min_16_chars

# Session Configuration
SESSION_SECRET=your_session_secret_here_min_32_chars
SESSION_EXPIRES_IN=86400
SESSION_ROTATION_INTERVAL=3600

# Webhook Security
WEBHOOK_SECRET=your_webhook_secret_here_min_32_chars
WEBHOOK_TOLERANCE=300

# MFA/OTP Configuration
OTP_LENGTH=6
OTP_EXPIRES_IN=300
OTP_MAX_ATTEMPTS=3
MFA_TIMEOUT_SECONDS=300

# ============================================
# CORS Configuration
# ============================================
# Comma-separated list of allowed origins for CORS
# In production, specify exact origins (e.g., https://app.flashapp.me,https://admin.flashapp.me)
# Leave empty to deny all cross-origin requests
CORS_ALLOWED_ORIGINS=

# ============================================
# Rate Limiting
# ============================================
# Prevent abuse by limiting requests per user
# RATE_LIMIT_WINDOW_MS: Time window in milliseconds
# RATE_LIMIT_MAX_REQUESTS: Maximum requests per time window
RATE_LIMIT_WINDOW_MS=60000
RATE_LIMIT_MAX_REQUESTS=100

# ============================================
# Request Size Limits
# ============================================
# Limit request body sizes to prevent DoS attacks
# Supports formats like: 100kb, 1mb, 10mb
MAX_REQUEST_SIZE=10mb
MAX_JSON_SIZE=1mb
MAX_URL_ENCODED_SIZE=1mb

# ============================================
# Logging
# ============================================
# Log level: error, warn, info, debug, verbose
LOG_LEVEL=info

# ============================================
# Nostr Configuration (Optional)
# ============================================
# Nostr integration for content sharing and zap forwarding
# The Pulse bot posts content on behalf of users to earn sats
# To set up:
# 1. Generate a new Nostr private key for Pulse
# 2. Add the nsec (private key) below
# 3. Configure relay servers (comma-separated)
# Leave empty to disable vybz/content sharing features
NOSTR_PRIVATE_KEY=
NOSTR_RELAYS=wss://relay.damus.io,wss://nos.lol,wss://relay.nostr.band,wss://relay.flashapp.me,wss://relay.primal.net,wss://nos.lol
# Optional: Your Pulse bot's npub (public key) for reference
NOSTR_PULSE_NPUB=

# ============================================
# Payment Notifications Configuration
# ============================================
# Enable/disable payment polling when Flash API is unavailable
# Set to false to disable the connection timeout errors
ENABLE_INTRALEDGER_POLLING=true
ENABLE_WEBSOCKET_NOTIFICATIONS=true
# Polling interval in milliseconds (default: 10000 = 10 seconds)
PAYMENT_POLLING_INTERVAL=10000

# ============================================
# Admin Configuration
# ============================================
# Comma-separated list of phone numbers that can use admin commands
# Example: ADMIN_PHONE_NUMBERS=13059244435,18765551234
ADMIN_PHONE_NUMBERS=13059244435,18764250250

# ============================================
# Support Configuration
# ============================================
# Phone number for Flash support agent (without + prefix)
# When users request human support, messages will be routed to this number
SUPPORT_PHONE_NUMBER=18762909250

# ============================================
# Google Cloud Voice Services (Optional)
# ============================================
# Enables both Text-to-Speech and Speech-to-Text features
# 
# Text-to-Speech: Premium voice responses with Chirp3-HD voices
# Speech-to-Text: Process voice messages from users
#
# To enable:
# 1. Create a Google Cloud project
# 2. Enable BOTH APIs:
#    - Cloud Text-to-Speech API
#    - Cloud Speech-to-Text API
# 3. Create a service account with permissions for both APIs
# 4. Download JSON key file and set path below
#
# Without configuration:
# - TTS falls back to free google-tts-api (200 char limit)
# - Voice messages won't be processed
# 
# Option 1: Specify key file path
GOOGLE_CLOUD_KEYFILE=/path/to/your/service-account-key.json
# 
# Option 2: Use environment variable (if already configured)
# GOOGLE_APPLICATION_CREDENTIALS=/path/to/your/service-account-key.json