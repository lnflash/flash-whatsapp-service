apiVersion: apps/v1
kind: Deployment
metadata:
  name: flash-connect
  namespace: flash-test
  labels:
    app: flash-connect
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flash-connect
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: flash-connect
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: flash-connect
        image: flashapp/flash-connect:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "test"
        - name: PORT
          value: "3000"
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: flash-connect-redis-test
              key: host
        - name: REDIS_PORT
          valueFrom:
            secretKeyRef:
              name: flash-connect-redis-test
              key: port
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: flash-connect-redis-test
              key: password
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: flash-connect-rabbitmq-test
              key: url
        - name: FLASH_API_URL
          valueFrom:
            configMapKeyRef:
              name: flash-whatsapp-config-test
              key: flash_api_url
        - name: FLASH_API_KEY
          valueFrom:
            secretKeyRef:
              name: flash-whatsapp-api-test
              key: api_key
        - name: TWILIO_ACCOUNT_SID
          valueFrom:
            secretKeyRef:
              name: flash-whatsapp-twilio-test
              key: account_sid
        - name: TWILIO_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: flash-whatsapp-twilio-test
              key: auth_token
        # Gemini AI doesn't need a URL configuration
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: flash-whatsapp-gemini-test
              key: api_key
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: flash-whatsapp-jwt-test
              key: secret
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: flash-connect
  namespace: flash-test
  labels:
    app: flash-connect
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: flash-connect
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flash-connect
  namespace: flash-test
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-body-size: "8m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "120"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "120"
spec:
  tls:
  - hosts:
    - test.whatsapp.flashapp.me
    secretName: test-whatsapp-flashapp-me-tls
  rules:
  - host: test.whatsapp.flashapp.me
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: flash-connect
            port:
              number: 80